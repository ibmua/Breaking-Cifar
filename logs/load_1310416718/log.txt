{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 64
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "load"
  save : "logs/load_1310416718"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 52
  weightDecay : 0.0008
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 32, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(32 -> 512, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(512 -> 1024, 3x3, 1,1, 1,1) without bias
          |      (8): cudnn.SpatialBatchNormalization
          |      (9): cudnn.ReLU
          |      (10): cudnn.SpatialConvolution(1024 -> 512, 1x1) without bias
          |      (11): cudnn.SpatialBatchNormalization
          |      (12): cudnn.ReLU
          |      (13): cudnn.SpatialConvolution(512 -> 32, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(16 -> 32, 1x1) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> output]
          |      (1): cudnn.SpatialConvolution(32 -> 64, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(64 -> 1024, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(1024 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.ReLU
          |      (11): cudnn.SpatialConvolution(2048 -> 1024, 1x1) without bias
          |      (12): cudnn.SpatialBatchNormalization
          |      (13): cudnn.ReLU
          |      (14): cudnn.SpatialConvolution(1024 -> 64, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(32 -> 64, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> output]
          |      (1): cudnn.SpatialConvolution(64 -> 128, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(128 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(2048 -> 4096, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.ReLU
          |      (11): cudnn.SpatialConvolution(4096 -> 2048, 1x1) without bias
          |      (12): cudnn.SpatialBatchNormalization
          |      (13): cudnn.ReLU
          |      (14): cudnn.SpatialConvolution(2048 -> 128, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(64 -> 128, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(128)
  (9): nn.Linear(128 -> 100)
}
Network has	19	convolutions	
Skipping memory optimization. Network is already optimized for training mode.	
Will save at logs/load_1310416718	
==> online epoch # 1 [batchSize = 64]	
{
  epoch : 1
  test_acc : 39.17
  loss : 1.78353920972
  train_acc : 50.902288732394
  lr : 0.09895
  train_time : 160.04385018349
  test_time : 9.9618699550629
  n_parameters : 13037492
  train_loss : 1.78353920972
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 64
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09895
  model : "load"
  save : "logs/load_1310416718"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 52
  weightDecay : 0.0008
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09895,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"load","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0008,"test_acc":39.17,"init_value":10,"train_acc":50.902288732394,"widen_factor":2,"imageSize":32,"train_time":160.04385018349,"save":"logs\/load_1310416718","dampening":0,"shortcutType":"A","epoch":1,"nGPU":1,"depth":52,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09895,"learningRateDecayRatio":0.991,"generate_graph":false,"train_loss":1.78353920972,"randomcrop_type":"reflection","test_time":9.9618699550629,"n_parameters":13037492,"epoch_step":1,"loss":1.78353920972}	
==> online epoch # 2 [batchSize = 64]	
{
  epoch : 2
  test_acc : 44.36
  loss : 1.8428531381446
  train_acc : 49.363796414853
  lr : 0.09790945
  train_time : 157.29336309433
  test_time : 9.6296520233154
  n_parameters : 13037492
  train_loss : 1.8428531381446
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 64
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09790945
  model : "load"
  save : "logs/load_1310416718"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 52
  weightDecay : 0.0008
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09790945,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"load","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0008,"test_acc":44.36,"init_value":10,"train_acc":49.363796414853,"widen_factor":2,"imageSize":32,"train_time":157.29336309433,"save":"logs\/load_1310416718","dampening":0,"shortcutType":"A","epoch":2,"nGPU":1,"depth":52,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09790945,"learningRateDecayRatio":0.991,"generate_graph":false,"train_loss":1.8428531381446,"randomcrop_type":"reflection","test_time":9.6296520233154,"n_parameters":13037492,"epoch_step":1,"loss":1.8428531381446}	
==> online epoch # 3 [batchSize = 64]	
