{
  optnet_optimize : true
  generate_graph : false
  learningRate : 0.1
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.985
  model : "hoard-2-x2-upscale"
  save : "logs/hoard-2-x2-upscale_3020517177"
  dampening : 0
  weightDecay : 0.0004
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1000
  momentum : 0.95
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00025
  data_type : "torch.CudaTensor"
  batchSize : 21
}
==> loading data	
==> configuring model	
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> output]
  (1): nn.SpatialUpSamplingBilinear(2)
  (2): nn.Concat {
    input
      |`-> (1): nn.Identity
      |`-> (2): nn.Sequential {
             [input -> (1) -> (2) -> (3) -> output]
             (1): cudnn.SpatialConvolution(3 -> 29, 3x3, 1,1, 1,1)
             (2): cudnn.SpatialBatchNormalization
             (3): cudnn.ReLU
           }
       ... -> output
  }
  (3): nn.Concat {
    input
      |`-> (1): nn.Identity
      |`-> (2): nn.Sequential {
             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
             (1): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
                        (1): cudnn.SpatialConvolution(32 -> 128, 3x3, 1,1, 1,1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(128 -> 64, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                      }
                  ... -> output
             }
             (2): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
                        (1): cudnn.SpatialConvolution(96 -> 64, 1x1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(64 -> 256, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                        (7): cudnn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
                        (8): cudnn.SpatialBatchNormalization
                        (9): cudnn.ReLU
                      }
                  ... -> output
             }
             (3): cudnn.SpatialConvolution(224 -> 64, 1x1)
             (4): cudnn.SpatialBatchNormalization
             (5): cudnn.ReLU
           }
       ... -> output
  }
  (4): nn.SpatialFractionalMaxPooling(0x0, 4,4)
  (5): nn.Concat {
    input
      |`-> (1): nn.Identity
      |`-> (2): nn.Sequential {
             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
             (1): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
                        (1): cudnn.SpatialConvolution(96 -> 384, 3x3, 1,1, 1,1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(384 -> 192, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                      }
                  ... -> output
             }
             (2): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
                        (1): cudnn.SpatialConvolution(288 -> 192, 1x1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(192 -> 768, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                        (7): cudnn.SpatialConvolution(768 -> 384, 3x3, 1,1, 1,1)
                        (8): cudnn.SpatialBatchNormalization
                        (9): cudnn.ReLU
                      }
                  ... -> output
             }
             (3): cudnn.SpatialConvolution(672 -> 64, 1x1)
             (4): cudnn.SpatialBatchNormalization
             (5): cudnn.ReLU
           }
       ... -> output
  }
  (6): nn.SpatialFractionalMaxPooling(0x0, 3,3)
  (7): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(160 -> 640, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(640 -> 320, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(480 -> 320, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(320 -> 1280, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
               (7): cudnn.SpatialConvolution(1280 -> 640, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): cudnn.ReLU
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(1120 -> 128, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (8): cudnn.SpatialMaxPooling(3x3, 2,2)
  (9): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 512, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(512 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(384 -> 256, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(256 -> 1024, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
               (7): cudnn.SpatialConvolution(1024 -> 512, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): cudnn.ReLU
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(896 -> 256, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (10): cudnn.SpatialMaxPooling(3x3, 2,2)
  (11): cudnn.SpatialAveragePooling(4x4, 1,1)
  (12): nn.View(-1)
  (13): nn.Linear(256 -> 100)
}
Network has	25	convolutions	
Will save at logs/hoard-2-x2-upscale_3020517177	
==> online epoch # 1 [batchSize = 21]	
{
  epoch : 1
  test_acc : 15.35
  loss : 3.9767159850657
  train_acc : 8.3733493397359
  lr : 0.09825
  train_time : 361.084389925
  test_time : 23.731201887131
  n_parameters : 11606858
  train_loss : 3.9767159850657
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.09825
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.985
  model : "hoard-2-x2-upscale"
  save : "logs/hoard-2-x2-upscale_3020517177"
  dampening : 0
  weightDecay : 0.0004
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1000
  momentum : 0.95
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00025
  data_type : "torch.CudaTensor"
  batchSize : 21
}
json_stats: {"optnet_optimize":true,"loss":3.9767159850657,"randomcrop":4,"batchSize":21,"data_type":"torch.CudaTensor","model":"hoard-2-x2-upscale","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.95,"optimMethod":"sgd","dropout":0,"weightDecay":0.0004,"test_acc":15.35,"init_value":10,"train_acc":8.3733493397359,"sequences":1,"epoch_step":1,"train_time":361.084389925,"learningRateDecayRatio":0.985,"dampening":0,"learningRateDecay":0.00025,"max_epoch":1000,"epoch":1,"imageSize":32,"depth":2,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-2-x2-upscale_3020517177","lr":0.09825,"generate_graph":false,"learningRate":0.09825,"train_loss":3.9767159850657,"randomcrop_type":"reflection","test_time":23.731201887131,"n_parameters":11606858,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 2 [batchSize = 21]	
{
  epoch : 2
  test_acc : 17.52
  loss : 3.4873240249498
  train_acc : 15.660264105642
  lr : 0.09652625
  train_time : 355.18364906311
  test_time : 23.267424106598
  n_parameters : 11606858
  train_loss : 3.4873240249498
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.09652625
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.985
  model : "hoard-2-x2-upscale"
  save : "logs/hoard-2-x2-upscale_3020517177"
  dampening : 0
  weightDecay : 0.0004
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1000
  momentum : 0.95
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00025
  data_type : "torch.CudaTensor"
  batchSize : 21
}
json_stats: {"optnet_optimize":true,"loss":3.4873240249498,"randomcrop":4,"batchSize":21,"data_type":"torch.CudaTensor","model":"hoard-2-x2-upscale","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.95,"optimMethod":"sgd","dropout":0,"weightDecay":0.0004,"test_acc":17.52,"init_value":10,"train_acc":15.660264105642,"sequences":1,"epoch_step":1,"train_time":355.18364906311,"learningRateDecayRatio":0.985,"dampening":0,"learningRateDecay":0.00025,"max_epoch":1000,"epoch":2,"imageSize":32,"depth":2,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-2-x2-upscale_3020517177","lr":0.09652625,"generate_graph":false,"learningRate":0.09652625,"train_loss":3.4873240249498,"randomcrop_type":"reflection","test_time":23.267424106598,"n_parameters":11606858,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 3 [batchSize = 21]	
