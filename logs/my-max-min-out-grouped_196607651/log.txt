{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 128
  epoch_step : 
    {
      1 : 5
      2 : 15
      3 : 20
      4 : 30
    }
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "my-max-min-out-grouped"
  save : "logs/my-max-min-out-grouped_196607651"
  dampening : 0
  learningRateDecayRatio : 0.5
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 50
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "./datasets/cifar10_whitened.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 200
  widen_factor : 1
  hflip : true
  dropout : 0
  learningRateDecay : 0
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
forward output	{
  1 : CudaTensor - size: 1x10
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> (42) -> (43) -> (44) -> (45) -> (46) -> (47) -> (48) -> (49) -> (50) -> output]
  (1): cudnn.SpatialConvolution(3 -> 48, 5x5, 1,1, 2,2) without bias
  (2): cudnn.SpatialBatchNormalization
  (3): nn.ELU (alpha:1.000000)
  (4): cudnn.SpatialConvolution(48 -> 192, 1x1) without bias
  (5): cudnn.SpatialBatchNormalization
  (6): nn.ELU (alpha:1.000000)
  (7): cudnn.SpatialConvolution(192 -> 96, 1x1) without bias
  (8): cudnn.SpatialBatchNormalization
  (9): nn.ELU (alpha:1.000000)
  (10): cudnn.SpatialConvolution(96 -> 48, 1x1) without bias
  (11): cudnn.SpatialBatchNormalization
  (12): nn.ELU (alpha:1.000000)
  (13): cudnn.SpatialConvolution(48 -> 48, 1x1) without bias
  (14): cudnn.SpatialBatchNormalization
  (15): nn.ELU (alpha:1.000000)
  (16): cudnn.SpatialMaxPooling(3x3, 2,2)
  (17): cudnn.SpatialConvolution(48 -> 192, 5x5, 1,1, 2,2) without bias
  (18): cudnn.SpatialBatchNormalization
  (19): nn.ELU (alpha:1.000000)
  (20): cudnn.SpatialConvolution(192 -> 768, 1x1) without bias
  (21): cudnn.SpatialBatchNormalization
  (22): nn.ELU (alpha:1.000000)
  (23): cudnn.SpatialConvolution(768 -> 384, 1x1) without bias
  (24): cudnn.SpatialBatchNormalization
  (25): nn.ELU (alpha:1.000000)
  (26): cudnn.SpatialConvolution(384 -> 192, 1x1) without bias
  (27): cudnn.SpatialBatchNormalization
  (28): nn.ELU (alpha:1.000000)
  (29): cudnn.SpatialConvolution(192 -> 192, 1x1) without bias
  (30): cudnn.SpatialBatchNormalization
  (31): nn.ELU (alpha:1.000000)
  (32): cudnn.SpatialAveragePooling(3x3, 2,2)
  (33): cudnn.SpatialConvolution(192 -> 768, 3x3, 1,1, 1,1) without bias
  (34): cudnn.SpatialBatchNormalization
  (35): nn.ELU (alpha:1.000000)
  (36): cudnn.SpatialConvolution(768 -> 3072, 1x1) without bias
  (37): cudnn.SpatialBatchNormalization
  (38): nn.ELU (alpha:1.000000)
  (39): cudnn.SpatialConvolution(3072 -> 1536, 1x1) without bias
  (40): cudnn.SpatialBatchNormalization
  (41): nn.ELU (alpha:1.000000)
  (42): cudnn.SpatialConvolution(1536 -> 768, 1x1) without bias
  (43): cudnn.SpatialBatchNormalization
  (44): nn.ELU (alpha:1.000000)
  (45): cudnn.SpatialConvolution(768 -> 768, 1x1) without bias
  (46): cudnn.SpatialBatchNormalization
  (47): nn.ELU (alpha:1.000000)
  (48): cudnn.SpatialAveragePooling(8x8, 1,1)
  (49): nn.View(-1)
  (50): nn.Linear(768 -> 10)
}
Network has	15	convolutions	
