{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "wide-res-restructured-pooled-actually-dot-g"
  save : "logs/wide-res-restructured-pooled-actually-dot-g_2608023767"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 148
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
16	32	1	1	1	1	0	0	1	
32	192	3	3	1	1	1	1	8	
192	192	1	1	1	1	0	0	6	
192	32	1	1	1	1	0	0	1	
32	32	1	1	1	1	0	0	1	
32	192	3	3	1	1	1	1	8	
192	192	1	1	1	1	0	0	6	
192	32	1	1	1	1	0	0	1	
32	32	1	1	1	1	0	0	1	
32	192	3	3	1	1	1	1	8	
192	192	1	1	1	1	0	0	6	
192	32	1	1	1	1	0	0	1	
32	32	1	1	1	1	0	0	1	
32	192	3	3	1	1	1	1	8	
192	192	1	1	1	1	0	0	6	
192	32	1	1	1	1	0	0	1	
32	64	1	1	1	1	0	0	1	
64	384	3	3	2	2	1	1	16	
384	384	1	1	1	1	0	0	6	
384	64	1	1	1	1	0	0	1	
64	64	1	1	1	1	0	0	1	
64	384	3	3	1	1	1	1	16	
384	384	1	1	1	1	0	0	6	
384	64	1	1	1	1	0	0	1	
64	64	1	1	1	1	0	0	1	
64	384	3	3	1	1	1	1	16	
384	384	1	1	1	1	0	0	6	
384	64	1	1	1	1	0	0	1	
64	64	1	1	1	1	0	0	1	
64	384	3	3	1	1	1	1	16	
384	384	1	1	1	1	0	0	6	
384	64	1	1	1	1	0	0	1	
64	128	1	1	1	1	0	0	1	
128	768	3	3	2	2	1	1	32	
768	768	1	1	1	1	0	0	6	
768	128	1	1	1	1	0	0	1	
128	128	1	1	1	1	0	0	1	
128	768	3	3	1	1	1	1	32	
768	768	1	1	1	1	0	0	6	
768	128	1	1	1	1	0	0	1	
128	128	1	1	1	1	0	0	1	
128	768	3	3	1	1	1	1	32	
768	768	1	1	1	1	0	0	6	
768	128	1	1	1	1	0	0	1	
128	128	1	1	1	1	0	0	1	
128	768	3	3	1	1	1	1	32	
768	768	1	1	1	1	0	0	6	
768	128	1	1	1	1	0	0	1	
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 32, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(32 -> 192, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(192 -> 192, 1x1) without bias
          |      (8): cudnn.SpatialBatchNormalization
          |      (9): cudnn.ReLU
          |      (10): cudnn.SpatialConvolution(192 -> 32, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(16 -> 32, 1x1) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 192, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(192 -> 192, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(192 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 192, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(192 -> 192, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(192 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 192, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(192 -> 192, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(192 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]
          |      (1): cudnn.SpatialConvolution(32 -> 64, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(64 -> 384, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(384 -> 384, 1x1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.ReLU
          |      (11): cudnn.SpatialConvolution(384 -> 64, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(32 -> 64, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 384, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(384 -> 384, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(384 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 384, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(384 -> 384, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(384 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 384, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(384 -> 384, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(384 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]
          |      (1): cudnn.SpatialConvolution(64 -> 128, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(128 -> 768, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(768 -> 768, 1x1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.ReLU
          |      (11): cudnn.SpatialConvolution(768 -> 128, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(64 -> 128, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(128 -> 768, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(768 -> 768, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(768 -> 128, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(128 -> 768, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(768 -> 768, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(768 -> 128, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(128 -> 768, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(768 -> 768, 1x1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(768 -> 128, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CMulTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(128)
  (9): nn.Linear(128 -> 100)
}
Network has	52	convolutions	
Will save at logs/wide-res-restructured-pooled-actually-dot-g_2608023767	
==> online epoch # 1 [batchSize = 32]	
{
  epoch : 1
  test_acc : 1
  loss : 4.597706703462
  train_acc : 1.220390524968
  lr : 0.09895
  train_time : 145.86939287186
  test_time : 7.8381378650665
  n_parameters : 1350196
  train_loss : 4.597706703462
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09895
  model : "wide-res-restructured-pooled-actually-dot-g"
  save : "logs/wide-res-restructured-pooled-actually-dot-g_2608023767"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 148
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09895,"randomcrop":4,"batchSize":32,"data_type":"torch.CudaTensor","model":"wide-res-restructured-pooled-actually-dot-g","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":1,"init_value":10,"train_acc":1.220390524968,"widen_factor":2,"imageSize":32,"train_time":145.86939287186,"save":"logs\/wide-res-restructured-pooled-actually-dot-g_2608023767","dampening":0,"shortcutType":"A","epoch":1,"nGPU":1,"depth":148,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09895,"learningRateDecayRatio":0.991,"generate_graph":false,"train_loss":4.597706703462,"randomcrop_type":"reflection","test_time":7.8381378650665,"n_parameters":1350196,"epoch_step":1,"loss":4.597706703462}	
==> online epoch # 2 [batchSize = 32]	
{
  epoch : 2
  test_acc : 1
  loss : 4.5959028162816
  train_acc : 1.2243918053777
  lr : 0.09790945
  train_time : 147.00136113167
  test_time : 7.558678150177
  n_parameters : 1350196
  train_loss : 4.5959028162816
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09790945
  model : "wide-res-restructured-pooled-actually-dot-g"
  save : "logs/wide-res-restructured-pooled-actually-dot-g_2608023767"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 148
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09790945,"randomcrop":4,"batchSize":32,"data_type":"torch.CudaTensor","model":"wide-res-restructured-pooled-actually-dot-g","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":1,"init_value":10,"train_acc":1.2243918053777,"widen_factor":2,"imageSize":32,"train_time":147.00136113167,"save":"logs\/wide-res-restructured-pooled-actually-dot-g_2608023767","dampening":0,"shortcutType":"A","epoch":2,"nGPU":1,"depth":148,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09790945,"learningRateDecayRatio":0.991,"generate_graph":false,"train_loss":4.5959028162816,"randomcrop_type":"reflection","test_time":7.558678150177,"n_parameters":1350196,"epoch_step":1,"loss":4.5959028162816}	
==> online epoch # 3 [batchSize = 32]	
{
  epoch : 3
  test_acc : 1
  loss : 4.5948036880102
  train_acc : 1.2183898847631
  lr : 0.09687826495
  train_time : 145.05515599251
  test_time : 7.4938678741455
  n_parameters : 1350196
  train_loss : 4.5948036880102
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09687826495
  model : "wide-res-restructured-pooled-actually-dot-g"
  save : "logs/wide-res-restructured-pooled-actually-dot-g_2608023767"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 148
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09687826495,"randomcrop":4,"batchSize":32,"data_type":"torch.CudaTensor","model":"wide-res-restructured-pooled-actually-dot-g","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":1,"init_value":10,"train_acc":1.2183898847631,"widen_factor":2,"imageSize":32,"train_time":145.05515599251,"save":"logs\/wide-res-restructured-pooled-actually-dot-g_2608023767","dampening":0,"shortcutType":"A","epoch":3,"nGPU":1,"depth":148,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09687826495,"learningRateDecayRatio":0.991,"generate_graph":false,"train_loss":4.5948036880102,"randomcrop_type":"reflection","test_time":7.4938678741455,"n_parameters":1350196,"epoch_step":1,"loss":4.5948036880102}	
==> online epoch # 4 [batchSize = 32]	
{
  epoch : 4
  test_acc : 1
  loss : 4.5942261063335
  train_acc : 1.2704065300896
  lr : 0.09585636056545
  train_time : 145.07592701912
  test_time : 7.590399980545
  n_parameters : 1350196
  train_loss : 4.5942261063335
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09585636056545
  model : "wide-res-restructured-pooled-actually-dot-g"
  save : "logs/wide-res-restructured-pooled-actually-dot-g_2608023767"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 148
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09585636056545,"randomcrop":4,"batchSize":32,"data_type":"torch.CudaTensor","model":"wide-res-restructured-pooled-actually-dot-g","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":1,"init_value":10,"train_acc":1.2704065300896,"widen_factor":2,"imageSize":32,"train_time":145.07592701912,"save":"logs\/wide-res-restructured-pooled-actually-dot-g_2608023767","dampening":0,"shortcutType":"A","epoch":4,"nGPU":1,"depth":148,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09585636056545,"learningRateDecayRatio":0.991,"generate_graph":false,"train_loss":4.5942261063335,"randomcrop_type":"reflection","test_time":7.590399980545,"n_parameters":1350196,"epoch_step":1,"loss":4.5942261063335}	
==> online epoch # 5 [batchSize = 32]	
{
  epoch : 5
  test_acc : 1
  loss : 4.5962121074545
  train_acc : 1.1823783610755
  lr : 0.094843653320361
  train_time : 145.32374715805
  test_time : 7.5495200157166
  n_parameters : 1350196
  train_loss : 4.5962121074545
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.094843653320361
  model : "wide-res-restructured-pooled-actually-dot-g"
  save : "logs/wide-res-restructured-pooled-actually-dot-g_2608023767"
  dampening : 0
  learningRateDecayRatio : 0.991
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 148
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.094843653320361,"randomcrop":4,"batchSize":32,"data_type":"torch.CudaTensor","model":"wide-res-restructured-pooled-actually-dot-g","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":1,"init_value":10,"train_acc":1.1823783610755,"widen_factor":2,"imageSize":32,"train_time":145.32374715805,"save":"logs\/wide-res-restructured-pooled-actually-dot-g_2608023767","dampening":0,"shortcutType":"A","epoch":5,"nGPU":1,"depth":148,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.094843653320361,"learningRateDecayRatio":0.991,"generate_graph":false,"train_loss":4.5962121074545,"randomcrop_type":"reflection","test_time":7.5495200157166,"n_parameters":1350196,"epoch_step":1,"loss":4.5962121074545}	
==> online epoch # 6 [batchSize = 32]	
