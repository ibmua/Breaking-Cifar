{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "original-theory-relu-non-quadratic"
  save : "logs/original-theory-relu-non-quadratic_100013108"
  dampening : 0
  learningRateDecayRatio : 0.98
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 22
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 8
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
1	groups	
16	2048	3	3	1	1	1	1	16	
2048	128	1	1	1	1	0	0	64	
128	2048	3	3	1	1	1	1	128	
2048	128	1	1	1	1	0	0	32	
1	groups	
128	2048	3	3	1	1	1	1	128	
2048	128	1	1	1	1	0	0	64	
128	2048	3	3	1	1	1	1	128	
2048	128	1	1	1	1	0	0	32	
1	groups	
128	2048	3	3	1	1	1	1	128	
2048	128	1	1	1	1	0	0	64	
128	2048	3	3	1	1	1	1	128	
2048	128	1	1	1	1	0	0	32	
1	groups	
128	4096	3	3	2	2	1	1	128	
4096	256	1	1	1	1	0	0	128	
256	4096	3	3	1	1	1	1	256	
4096	256	1	1	1	1	0	0	64	
1	groups	
256	4096	3	3	1	1	1	1	256	
4096	256	1	1	1	1	0	0	128	
256	4096	3	3	1	1	1	1	256	
4096	256	1	1	1	1	0	0	64	
1	groups	
256	4096	3	3	1	1	1	1	256	
4096	256	1	1	1	1	0	0	128	
256	4096	3	3	1	1	1	1	256	
4096	256	1	1	1	1	0	0	64	
1	groups	
256	8192	3	3	2	2	1	1	256	
8192	512	1	1	1	1	0	0	256	
512	8192	3	3	1	1	1	1	512	
8192	512	1	1	1	1	0	0	128	
1	groups	
512	8192	3	3	1	1	1	1	512	
8192	512	1	1	1	1	0	0	256	
512	8192	3	3	1	1	1	1	512	
8192	512	1	1	1	1	0	0	128	
1	groups	
512	8192	3	3	1	1	1	1	512	
8192	512	1	1	1	1	0	0	256	
512	8192	3	3	1	1	1	1	512	
8192	512	1	1	1	1	0	0	128	
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(2048 -> 128, 1x1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(128 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (8): cudnn.SpatialBatchNormalization
          |      (9): cudnn.ReLU
          |      (10): cudnn.SpatialConvolution(2048 -> 128, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(16 -> 128, 1x1) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(2048 -> 128, 1x1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(128 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(2048 -> 128, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(2048 -> 128, 1x1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(128 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(2048 -> 128, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialConvolution(128 -> 4096, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(4096 -> 256, 1x1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(256 -> 4096, 3x3, 1,1, 1,1) without bias
          |      (8): cudnn.SpatialBatchNormalization
          |      (9): cudnn.ReLU
          |      (10): cudnn.SpatialConvolution(4096 -> 256, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(128 -> 256, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 4096, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(4096 -> 256, 1x1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(256 -> 4096, 3x3, 1,1, 1,1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(4096 -> 256, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 4096, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(4096 -> 256, 1x1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(256 -> 4096, 3x3, 1,1, 1,1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(4096 -> 256, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialConvolution(256 -> 8192, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(8192 -> 512, 1x1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(512 -> 8192, 3x3, 1,1, 1,1) without bias
          |      (8): cudnn.SpatialBatchNormalization
          |      (9): cudnn.ReLU
          |      (10): cudnn.SpatialConvolution(8192 -> 512, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(256 -> 512, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(512 -> 8192, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(8192 -> 512, 1x1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(512 -> 8192, 3x3, 1,1, 1,1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(8192 -> 512, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(512 -> 8192, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(8192 -> 512, 1x1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(512 -> 8192, 3x3, 1,1, 1,1) without bias
          |      (10): cudnn.SpatialBatchNormalization
          |      (11): cudnn.ReLU
          |      (12): cudnn.SpatialConvolution(8192 -> 512, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(512)
  (9): nn.Linear(512 -> 100)
}
Network has	40	convolutions	
Will save at logs/original-theory-relu-non-quadratic_100013108	
==> online epoch # 1 [batchSize = 32]	
{
  epoch : 1
  test_acc : 28.82
  loss : 3.3445896568127
  train_acc : 19.252160691421
  lr : 0.09785
  train_time : 1579.4128990173
  test_time : 72.512109994888
  n_parameters : 1432628
  train_loss : 3.3445896568127
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09785
  model : "original-theory-relu-non-quadratic"
  save : "logs/original-theory-relu-non-quadratic_100013108"
  dampening : 0
  learningRateDecayRatio : 0.98
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 22
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 8
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09785,"randomcrop":4,"batchSize":32,"data_type":"torch.CudaTensor","model":"original-theory-relu-non-quadratic","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":5e-07,"test_acc":28.82,"init_value":10,"train_acc":19.252160691421,"widen_factor":8,"imageSize":32,"train_time":1579.4128990173,"save":"logs\/original-theory-relu-non-quadratic_100013108","dampening":0,"shortcutType":"A","epoch":1,"nGPU":1,"depth":22,"learningRateDecay":0.00015,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09785,"learningRateDecayRatio":0.98,"generate_graph":false,"train_loss":3.3445896568127,"randomcrop_type":"reflection","test_time":72.512109994888,"n_parameters":1432628,"epoch_step":1,"loss":3.3445896568127}	
==> online epoch # 2 [batchSize = 32]	
