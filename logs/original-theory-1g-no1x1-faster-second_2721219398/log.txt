{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 256
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "original-theory-1g-no1x1-faster-second"
  save : "logs/original-theory-1g-no1x1-faster-second_2721219398"
  dampening : 0
  learningRateDecayRatio : 0.97
  shortcutType : "A"
  nesterov : false
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.8
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 4
  hflip : true
  dropout : 0
  learningRateDecay : 1e-05
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
1	groups	
16	64	3	3	1	1	1	1	1	
64	64	3	3	1	1	1	1	8	
1	groups	
64	64	3	3	1	1	1	1	1	
64	64	3	3	1	1	1	1	8	
1	groups	
64	64	3	3	1	1	1	1	1	
64	64	3	3	1	1	1	1	8	
1	groups	
64	64	3	3	1	1	1	1	1	
64	64	3	3	1	1	1	1	8	
1	groups	
64	64	3	3	1	1	1	1	1	
64	64	3	3	1	1	1	1	8	
1	groups	
64	64	3	3	1	1	1	1	1	
64	64	3	3	1	1	1	1	8	
1	groups	
64	128	3	3	2	2	1	1	1	
128	128	3	3	1	1	1	1	16	
1	groups	
128	128	3	3	1	1	1	1	1	
128	128	3	3	1	1	1	1	16	
1	groups	
128	128	3	3	1	1	1	1	1	
128	128	3	3	1	1	1	1	16	
1	groups	
128	128	3	3	1	1	1	1	1	
128	128	3	3	1	1	1	1	16	
1	groups	
128	128	3	3	1	1	1	1	1	
128	128	3	3	1	1	1	1	16	
1	groups	
128	128	3	3	1	1	1	1	1	
128	128	3	3	1	1	1	1	16	
1	groups	
128	256	3	3	2	2	1	1	1	
256	256	3	3	1	1	1	1	32	
1	groups	
256	256	3	3	1	1	1	1	1	
256	256	3	3	1	1	1	1	32	
1	groups	
256	256	3	3	1	1	1	1	1	
256	256	3	3	1	1	1	1	32	
1	groups	
256	256	3	3	1	1	1	1	1	
256	256	3	3	1	1	1	1	32	
1	groups	
256	256	3	3	1	1	1	1	1	
256	256	3	3	1	1	1	1	32	
1	groups	
256	256	3	3	1	1	1	1	1	
256	256	3	3	1	1	1	1	32	
forward output	{
  1 : CudaTensor - size: 1x99
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 64, 3x3, 1,1, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> output]
          |      (1): cudnn.SpatialConvolution(64 -> 128, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(64 -> 128, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> output]
          |      (1): cudnn.SpatialConvolution(128 -> 256, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(128 -> 256, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(256)
  (9): nn.Linear(256 -> 99)
}
Network has	40	convolutions	
Will save at logs/original-theory-1g-no1x1-faster-second_2721219398	
==> online epoch # 1 [batchSize = 256]	
{
  epoch : 1
  test_acc : 7.74
  loss : 4.0490638109354
  train_acc : 7.4138621794872
  lr : 0.09699
  train_time : 229.39509296417
  test_time : 4.6081669330597
  n_parameters : 4520755
  train_loss : 4.0490638109354
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 99
  init_value : 10
  randomcrop : 4
  batchSize : 256
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09699
  model : "original-theory-1g-no1x1-faster-second"
  save : "logs/original-theory-1g-no1x1-faster-second_2721219398"
  dampening : 0
  learningRateDecayRatio : 0.97
  shortcutType : "A"
  nesterov : false
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.8
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 4
  hflip : true
  dropout : 0
  learningRateDecay : 1e-05
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09699,"randomcrop":4,"batchSize":256,"data_type":"torch.CudaTensor","model":"original-theory-1g-no1x1-faster-second","nesterov":false,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.8,"optimMethod":"sgd","dropout":0,"weightDecay":5e-07,"test_acc":7.74,"init_value":10,"train_acc":7.4138621794872,"widen_factor":4,"imageSize":32,"train_time":229.39509296417,"save":"logs\/original-theory-1g-no1x1-faster-second_2721219398","dampening":0,"shortcutType":"A","epoch":1,"nGPU":1,"depth":40,"learningRateDecay":1e-05,"hflip":true,"max_epoch":1500,"num_classes":99,"lr":0.09699,"learningRateDecayRatio":0.97,"generate_graph":false,"train_loss":4.0490638109354,"randomcrop_type":"reflection","test_time":4.6081669330597,"n_parameters":4520755,"epoch_step":1,"loss":4.0490638109354}	
==> online epoch # 2 [batchSize = 256]	
{
  epoch : 2
  test_acc : 17.65
  loss : 3.4675305366516
  train_acc : 15.745192307692
  lr : 0.0940703
  train_time : 230.01511192322
  test_time : 4.3264799118042
  n_parameters : 4520755
  train_loss : 3.4675305366516
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 99
  init_value : 10
  randomcrop : 4
  batchSize : 256
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.0940703
  model : "original-theory-1g-no1x1-faster-second"
  save : "logs/original-theory-1g-no1x1-faster-second_2721219398"
  dampening : 0
  learningRateDecayRatio : 0.97
  shortcutType : "A"
  nesterov : false
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.8
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 4
  hflip : true
  dropout : 0
  learningRateDecay : 1e-05
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.0940703,"randomcrop":4,"batchSize":256,"data_type":"torch.CudaTensor","model":"original-theory-1g-no1x1-faster-second","nesterov":false,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.8,"optimMethod":"sgd","dropout":0,"weightDecay":5e-07,"test_acc":17.65,"init_value":10,"train_acc":15.745192307692,"widen_factor":4,"imageSize":32,"train_time":230.01511192322,"save":"logs\/original-theory-1g-no1x1-faster-second_2721219398","dampening":0,"shortcutType":"A","epoch":2,"nGPU":1,"depth":40,"learningRateDecay":1e-05,"hflip":true,"max_epoch":1500,"num_classes":99,"lr":0.0940703,"learningRateDecayRatio":0.97,"generate_graph":false,"train_loss":3.4675305366516,"randomcrop_type":"reflection","test_time":4.3264799118042,"n_parameters":4520755,"epoch_step":1,"loss":3.4675305366516}	
==> online epoch # 3 [batchSize = 256]	
{
  epoch : 3
  test_acc : 25.25
  loss : 2.9910896680294
  train_acc : 24.270833333333
  lr : 0.091238191
  train_time : 240.48150801659
  test_time : 4.295333147049
  n_parameters : 4520755
  train_loss : 2.9910896680294
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 99
  init_value : 10
  randomcrop : 4
  batchSize : 256
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.091238191
  model : "original-theory-1g-no1x1-faster-second"
  save : "logs/original-theory-1g-no1x1-faster-second_2721219398"
  dampening : 0
  learningRateDecayRatio : 0.97
  shortcutType : "A"
  nesterov : false
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.8
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 4
  hflip : true
  dropout : 0
  learningRateDecay : 1e-05
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.091238191,"randomcrop":4,"batchSize":256,"data_type":"torch.CudaTensor","model":"original-theory-1g-no1x1-faster-second","nesterov":false,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.8,"optimMethod":"sgd","dropout":0,"weightDecay":5e-07,"test_acc":25.25,"init_value":10,"train_acc":24.270833333333,"widen_factor":4,"imageSize":32,"train_time":240.48150801659,"save":"logs\/original-theory-1g-no1x1-faster-second_2721219398","dampening":0,"shortcutType":"A","epoch":3,"nGPU":1,"depth":40,"learningRateDecay":1e-05,"hflip":true,"max_epoch":1500,"num_classes":99,"lr":0.091238191,"learningRateDecayRatio":0.97,"generate_graph":false,"train_loss":2.9910896680294,"randomcrop_type":"reflection","test_time":4.295333147049,"n_parameters":4520755,"epoch_step":1,"loss":2.9910896680294}	
==> online epoch # 4 [batchSize = 256]	
