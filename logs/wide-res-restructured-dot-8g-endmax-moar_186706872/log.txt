{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 64
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "wide-res-restructured-dot-8g-endmax-moar"
  save : "logs/wide-res-restructured-dot-8g-endmax-moar_186706872"
  dampening : 0
  learningRateDecayRatio : 0.99
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 52
  weightDecay : 0.0003
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 2
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
16	64	1	1	1	1	0	0	1	
64	512	3	3	1	1	1	1	32	
512	256	1	1	1	1	0	0	8	
256	32	1	1	1	1	0	0	1	
32	128	1	1	1	1	0	0	1	
128	1024	3	3	1	1	1	1	16	
1024	512	1	1	2	2	0	0	8	
512	64	1	1	1	1	0	0	1	
64	256	1	1	1	1	0	0	1	
256	2048	3	3	1	1	1	1	8	
2048	1024	1	1	2	2	0	0	8	
1024	128	1	1	1	1	0	0	1	
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): nn.PReLU
          |      (4): cudnn.SpatialConvolution(64 -> 512, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): nn.PReLU
          |      (7): cudnn.SpatialConvolution(512 -> 256, 1x1) without bias
          |      (8): cudnn.SpatialBatchNormalization
          |      (9): nn.PReLU
          |      (10): cudnn.SpatialConvolution(256 -> 32, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(16 -> 32, 1x1) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]
          |      (1): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): nn.PReLU
          |      (4): cudnn.SpatialConvolution(128 -> 1024, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): nn.PReLU
          |      (7): cudnn.SpatialConvolution(1024 -> 512, 1x1) without bias
          |      (8): cudnn.SpatialMaxPooling(2x2, 2,2)
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): nn.PReLU
          |      (11): cudnn.SpatialConvolution(512 -> 64, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(32 -> 64, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]
          |      (1): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): nn.PReLU
          |      (4): cudnn.SpatialConvolution(256 -> 2048, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): nn.PReLU
          |      (7): cudnn.SpatialConvolution(2048 -> 1024, 1x1) without bias
          |      (8): cudnn.SpatialMaxPooling(2x2, 2,2)
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): nn.PReLU
          |      (11): cudnn.SpatialConvolution(1024 -> 128, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(64 -> 128, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CMulTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(128)
  (9): nn.Linear(128 -> 100)
}
Network has	16	convolutions	
Will save at logs/wide-res-restructured-dot-8g-endmax-moar_186706872	
==> online epoch # 1 [batchSize = 64]	
