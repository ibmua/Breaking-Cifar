{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 128
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "original-theory-1g"
  save : "logs/original-theory-1g_291082487"
  dampening : 0
  learningRateDecayRatio : 0.99
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_whitened.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 1
  hflip : true
  dropout : 0
  learningRateDecay : 5e-05
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
1	groups	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
1	groups	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
1	groups	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
1	groups	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
1	groups	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
1	groups	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
16	16	3	3	1	1	1	1	16	
16	16	1	1	1	1	0	0	1	
1	groups	
16	32	3	3	2	2	1	1	16	
32	32	1	1	1	1	0	0	1	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
1	groups	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
1	groups	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
1	groups	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
1	groups	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
1	groups	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
32	32	3	3	1	1	1	1	32	
32	32	1	1	1	1	0	0	1	
1	groups	
32	64	3	3	2	2	1	1	32	
64	64	1	1	1	1	0	0	1	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
1	groups	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
1	groups	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
1	groups	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
1	groups	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
1	groups	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
64	64	3	3	1	1	1	1	64	
64	64	1	1	1	1	0	0	1	
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 32, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(16 -> 32, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(32 -> 32, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> output]
          |      (1): cudnn.SpatialConvolution(32 -> 64, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |    }
          |`-> (2): cudnn.SpatialConvolution(32 -> 64, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |      (6): cudnn.SpatialBatchNormalization
          |      (7): cudnn.ReLU
          |      (8): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (9): cudnn.SpatialBatchNormalization
          |      (10): cudnn.SpatialConvolution(64 -> 64, 1x1) without bias
          |    }
          |`-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(64)
  (9): nn.Linear(64 -> 100)
}
Network has	75	convolutions	
Will save at logs/original-theory-1g_291082487	
==> online epoch # 1 [batchSize = 128]	
{
  epoch : 1
  test_acc : 11.49
  loss : 4.1778380063864
  train_acc : 5.3305288461538
  lr : 0.09895
  train_time : 115.54511213303
  test_time : 4.6658358573914
  n_parameters : 91508
  train_loss : 4.1778380063864
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 128
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.09895
  model : "original-theory-1g"
  save : "logs/original-theory-1g_291082487"
  dampening : 0
  learningRateDecayRatio : 0.99
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_whitened.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 1
  hflip : true
  dropout : 0
  learningRateDecay : 5e-05
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.09895,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"original-theory-1g","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":5e-07,"test_acc":11.49,"init_value":10,"train_acc":5.3305288461538,"widen_factor":1,"imageSize":32,"train_time":115.54511213303,"save":"logs\/original-theory-1g_291082487","dampening":0,"shortcutType":"A","epoch":1,"nGPU":1,"depth":40,"learningRateDecay":5e-05,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.09895,"learningRateDecayRatio":0.99,"generate_graph":false,"train_loss":4.1778380063864,"randomcrop_type":"reflection","test_time":4.6658358573914,"n_parameters":91508,"epoch_step":1,"loss":4.1778380063864}	
==> online epoch # 2 [batchSize = 128]	
{
  epoch : 2
  test_acc : 15.73
  loss : 3.3585835273449
  train_acc : 16.668669871795
  lr : 0.0979105
  train_time : 120.98177409172
  test_time : 4.7097918987274
  n_parameters : 91508
  train_loss : 3.3585835273449
}
{
  optnet_optimize : true
  generate_graph : false
  num_classes : 100
  init_value : 10
  randomcrop : 4
  batchSize : 128
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.0979105
  model : "original-theory-1g"
  save : "logs/original-theory-1g_291082487"
  dampening : 0
  learningRateDecayRatio : 0.99
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_whitened.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 1
  hflip : true
  dropout : 0
  learningRateDecay : 5e-05
  nGPU : 1
  data_type : "torch.CudaTensor"
}
json_stats: {"optnet_optimize":true,"learningRate":0.0979105,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"original-theory-1g","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":5e-07,"test_acc":15.73,"init_value":10,"train_acc":16.668669871795,"widen_factor":1,"imageSize":32,"train_time":120.98177409172,"save":"logs\/original-theory-1g_291082487","dampening":0,"shortcutType":"A","epoch":2,"nGPU":1,"depth":40,"learningRateDecay":5e-05,"hflip":true,"max_epoch":1500,"num_classes":100,"lr":0.0979105,"learningRateDecayRatio":0.99,"generate_graph":false,"train_loss":3.3585835273449,"randomcrop_type":"reflection","test_time":4.7097918987274,"n_parameters":91508,"epoch_step":1,"loss":3.3585835273449}	
==> online epoch # 3 [batchSize = 128]	
