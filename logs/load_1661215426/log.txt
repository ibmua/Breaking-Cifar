{
  optnet_optimize : true
  generate_graph : false
  learningRate : 0.01
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.99
  model : "load"
  save : "logs/load_1661215426"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1000
  momentum : 0.95
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 16
}
==> loading data	
==> configuring model	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> output]
  (1): nn.SpatialUpSamplingBilinear(2)
  (2): nn.Concat {
    input
      |`-> (1): nn.Identity
      |`-> (2): nn.Sequential {
             [input -> (1) -> (2) -> (3) -> output]
             (1): cudnn.SpatialConvolution(3 -> 29, 3x3, 1,1, 1,1)
             (2): cudnn.SpatialBatchNormalization
             (3): cudnn.ReLU
           }
       ... -> output
  }
  (3): nn.Concat {
    input
      |`-> (1): nn.Identity
      |`-> (2): nn.Sequential {
             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
             (1): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
                        (1): cudnn.SpatialConvolution(32 -> 128, 3x3, 1,1, 1,1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(128 -> 64, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                      }
                  ... -> output
             }
             (2): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
                        (1): cudnn.SpatialConvolution(96 -> 64, 1x1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(64 -> 256, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                        (7): cudnn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
                        (8): cudnn.SpatialBatchNormalization
                        (9): cudnn.ReLU
                      }
                  ... -> output
             }
             (3): cudnn.SpatialConvolution(224 -> 64, 1x1)
             (4): cudnn.SpatialBatchNormalization
             (5): cudnn.ReLU
           }
       ... -> output
  }
  (4): nn.SpatialFractionalMaxPooling(0x0, 4,4)
  (5): nn.Concat {
    input
      |`-> (1): nn.Identity
      |`-> (2): nn.Sequential {
             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
             (1): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
                        (1): cudnn.SpatialConvolution(96 -> 384, 3x3, 1,1, 1,1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(384 -> 192, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                      }
                  ... -> output
             }
             (2): nn.Concat {
               input
                 |`-> (1): nn.Identity
                 |`-> (2): nn.Sequential {
                        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
                        (1): cudnn.SpatialConvolution(288 -> 192, 1x1)
                        (2): cudnn.SpatialBatchNormalization
                        (3): cudnn.ReLU
                        (4): cudnn.SpatialConvolution(192 -> 768, 3x3, 1,1, 1,1)
                        (5): cudnn.SpatialBatchNormalization
                        (6): cudnn.ReLU
                        (7): cudnn.SpatialConvolution(768 -> 384, 3x3, 1,1, 1,1)
                        (8): cudnn.SpatialBatchNormalization
                        (9): cudnn.ReLU
                      }
                  ... -> output
             }
             (3): cudnn.SpatialConvolution(672 -> 64, 1x1)
             (4): cudnn.SpatialBatchNormalization
             (5): cudnn.ReLU
           }
       ... -> output
  }
  (6): nn.SpatialFractionalMaxPooling(0x0, 3,3)
  (7): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(160 -> 640, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(640 -> 320, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(480 -> 320, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(320 -> 1280, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
               (7): cudnn.SpatialConvolution(1280 -> 640, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): cudnn.ReLU
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(1120 -> 128, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (8): cudnn.SpatialMaxPooling(3x3, 2,2)
  (9): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 512, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(512 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(384 -> 256, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(256 -> 1024, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
               (7): cudnn.SpatialConvolution(1024 -> 512, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): cudnn.ReLU
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(896 -> 256, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (10): cudnn.SpatialMaxPooling(3x3, 2,2)
  (11): cudnn.SpatialAveragePooling(4x4, 1,1)
  (12): nn.View(-1)
  (13): nn.Linear(256 -> 100)
}
Network has	25	convolutions	
Skipping memory optimization. Network is already optimized for training mode.	
Will save at logs/load_1661215426	
==> online epoch # 1 [batchSize = 16]	
