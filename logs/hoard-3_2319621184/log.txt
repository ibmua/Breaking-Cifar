{
  optnet_optimize : true
  generate_graph : false
  learningRate : 0.1
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
==> loading data	
==> configuring model	
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 3
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 3
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 6
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 3
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 9
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 3
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 12
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 3
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 15
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 3
          2 : 3
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 64
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 96
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 128
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 160
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 64
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 96
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 128
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 160
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 128
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 192
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 256
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 320
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 64
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 96
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 128
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 160
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 128
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 192
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 256
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 320
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 128
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 192
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 256
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 320
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 256
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 512
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 768
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 1024
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
  5 : 
    {
      1 : 
        {
          1 : 1280
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 2
          4 : 2
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
    }
}
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> output]
  (1): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(3 -> 3, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(3 -> 3, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(6 -> 3, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(3 -> 3, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (3): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(9 -> 3, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(3 -> 3, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (4): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(12 -> 3, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(3 -> 3, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (5): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(15 -> 3, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(3 -> 3, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (6): cudnn.SpatialConvolution(18 -> 32, 1x1)
    (7): cudnn.SpatialBatchNormalization
    (8): cudnn.ReLU
    (9): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(32 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (10): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (11): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(96 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (12): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (13): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(160 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (14): cudnn.SpatialConvolution(192 -> 32, 1x1)
    (15): cudnn.SpatialBatchNormalization
    (16): cudnn.ReLU
  }
  (2): cudnn.SpatialMaxPooling(3x3, 2,2)
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(32 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (3): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(96 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (4): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (5): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(160 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (6): cudnn.SpatialConvolution(192 -> 64, 1x1)
    (7): cudnn.SpatialBatchNormalization
    (8): cudnn.ReLU
    (9): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (10): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (11): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(192 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (12): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(256 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (13): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(320 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (14): cudnn.SpatialConvolution(384 -> 64, 1x1)
    (15): cudnn.SpatialBatchNormalization
    (16): cudnn.ReLU
  }
  (4): cudnn.VolumetricMaxPooling
  (5): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(32 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (3): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(96 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (4): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (5): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(160 -> 32, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (6): cudnn.SpatialConvolution(192 -> 64, 1x1)
    (7): cudnn.SpatialBatchNormalization
    (8): cudnn.ReLU
    (9): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (10): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (11): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(192 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (12): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(256 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (13): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(320 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (14): cudnn.SpatialConvolution(384 -> 64, 1x1)
    (15): cudnn.SpatialBatchNormalization
    (16): cudnn.ReLU
  }
  (6): cudnn.SpatialAveragePooling(2x2, 2,2)
  (7): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (3): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(192 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (4): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(256 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (5): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(320 -> 64, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (6): cudnn.SpatialConvolution(384 -> 256, 1x1)
    (7): cudnn.SpatialBatchNormalization
    (8): cudnn.ReLU
    (9): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(256 -> 256, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(256 -> 256, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (10): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(512 -> 256, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(256 -> 256, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (11): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(768 -> 256, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(256 -> 256, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (12): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(1024 -> 256, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(256 -> 256, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (13): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(1280 -> 256, 2x2, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(256 -> 256, 2x2)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (14): cudnn.SpatialConvolution(1536 -> 256, 1x1)
    (15): cudnn.SpatialBatchNormalization
    (16): cudnn.ReLU
  }
  (8): cudnn.VolumetricMaxPooling
  (9): nn.View(-1)
  (10): nn.Linear(128 -> 100)
}
Network has	88	convolutions	
Will save at logs/hoard-3_2319621184	
==> online epoch # 1 [batchSize = 64]	
{
  epoch : 1
  test_acc : 4.69
  loss : 4.468679463207
  train_acc : 2.722871318822
  lr : 0.09925
  train_time : 81.178677797318
  test_time : 6.8315739631653
  n_parameters : 7076174
  train_loss : 4.468679463207
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.09925
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":4.468679463207,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":4.69,"init_value":10,"train_acc":2.722871318822,"sequences":2,"epoch_step":1,"train_time":81.178677797318,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":1,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.09925,"generate_graph":false,"learningRate":0.09925,"train_loss":4.468679463207,"randomcrop_type":"reflection","test_time":6.8315739631653,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 2 [batchSize = 64]	
{
  epoch : 2
  test_acc : 10.13
  loss : 3.7963439954228
  train_acc : 10.987516005122
  lr : 0.0985045
  train_time : 83.062332868576
  test_time : 6.020467042923
  n_parameters : 7076174
  train_loss : 3.7963439954228
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.0985045
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":3.7963439954228,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":10.13,"init_value":10,"train_acc":10.987516005122,"sequences":2,"epoch_step":1,"train_time":83.062332868576,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":2,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.0985045,"generate_graph":false,"learningRate":0.0985045,"train_loss":3.7963439954228,"randomcrop_type":"reflection","test_time":6.020467042923,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 3 [batchSize = 64]	
{
  epoch : 3
  test_acc : 19.32
  loss : 3.3551976656334
  train_acc : 18.60595390525
  lr : 0.097763473
  train_time : 82.646609783173
  test_time : 5.9878590106964
  n_parameters : 7076174
  train_loss : 3.3551976656334
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.097763473
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":3.3551976656334,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":19.32,"init_value":10,"train_acc":18.60595390525,"sequences":2,"epoch_step":1,"train_time":82.646609783173,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":3,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.097763473,"generate_graph":false,"learningRate":0.097763473,"train_loss":3.3551976656334,"randomcrop_type":"reflection","test_time":5.9878590106964,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 4 [batchSize = 64]	
{
  epoch : 4
  test_acc : 24.96
  loss : 3.0339121400318
  train_acc : 24.009683098592
  lr : 0.097026892162
  train_time : 83.600344896317
  test_time : 6.1720099449158
  n_parameters : 7076174
  train_loss : 3.0339121400318
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.097026892162
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":3.0339121400318,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":24.96,"init_value":10,"train_acc":24.009683098592,"sequences":2,"epoch_step":1,"train_time":83.600344896317,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":4,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.097026892162,"generate_graph":false,"learningRate":0.097026892162,"train_loss":3.0339121400318,"randomcrop_type":"reflection","test_time":6.1720099449158,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 5 [batchSize = 64]	
{
  epoch : 5
  test_acc : 30.49
  loss : 2.7502705766968
  train_acc : 29.557458386684
  lr : 0.096294730809028
  train_time : 83.166312932968
  test_time : 6.0005819797516
  n_parameters : 7076174
  train_loss : 2.7502705766968
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.096294730809028
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":2.7502705766968,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":30.49,"init_value":10,"train_acc":29.557458386684,"sequences":2,"epoch_step":1,"train_time":83.166312932968,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":5,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.096294730809028,"generate_graph":false,"learningRate":0.096294730809028,"train_loss":2.7502705766968,"randomcrop_type":"reflection","test_time":6.0005819797516,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 6 [batchSize = 64]	
{
  epoch : 6
  test_acc : 31.89
  loss : 2.5798765945984
  train_acc : 32.958546734955
  lr : 0.095566962424174
  train_time : 83.171955108643
  test_time : 5.9844319820404
  n_parameters : 7076174
  train_loss : 2.5798765945984
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.095566962424174
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":2.5798765945984,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":31.89,"init_value":10,"train_acc":32.958546734955,"sequences":2,"epoch_step":1,"train_time":83.171955108643,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":6,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.095566962424174,"generate_graph":false,"learningRate":0.095566962424174,"train_loss":2.5798765945984,"randomcrop_type":"reflection","test_time":5.9844319820404,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 7 [batchSize = 64]	
{
  epoch : 7
  test_acc : 36.06
  loss : 2.4259769617366
  train_acc : 36.313620358515
  lr : 0.094843560649629
  train_time : 82.994144916534
  test_time : 6.0215210914612
  n_parameters : 7076174
  train_loss : 2.4259769617366
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.094843560649629
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":2.4259769617366,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":36.06,"init_value":10,"train_acc":36.313620358515,"sequences":2,"epoch_step":1,"train_time":82.994144916534,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":7,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.094843560649629,"generate_graph":false,"learningRate":0.094843560649629,"train_loss":2.4259769617366,"randomcrop_type":"reflection","test_time":6.0215210914612,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 8 [batchSize = 64]	
{
  epoch : 8
  test_acc : 34.12
  loss : 2.3626604125991
  train_acc : 37.391965428937
  lr : 0.094124499285731
  train_time : 82.683901071548
  test_time : 5.9202151298523
  n_parameters : 7076174
  train_loss : 2.3626604125991
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.094124499285731
  init_value : 10
  randomcrop : 4
  sequences : 2
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-3"
  save : "logs/hoard-3_2319621184"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 5
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":2.3626604125991,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-3","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":34.12,"init_value":10,"train_acc":37.391965428937,"sequences":2,"epoch_step":1,"train_time":82.683901071548,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":8,"imageSize":32,"depth":5,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-3_2319621184","lr":0.094124499285731,"generate_graph":false,"learningRate":0.094124499285731,"train_loss":2.3626604125991,"randomcrop_type":"reflection","test_time":5.9202151298523,"n_parameters":7076174,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 9 [batchSize = 64]	
