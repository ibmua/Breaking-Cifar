{
  optnet_optimize : true
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 32
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "nin-my-grouped-2x2-volumetric-deep-fattop"
  save : "logs/nin-my-grouped-2x2-volumetric-deep-fattop_347319886"
  dampening : 0
  learningRateDecayRatio : 0.993
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 40
  weightDecay : 5e-07
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 1500
  widen_factor : 4
  hflip : true
  dropout : 0
  learningRateDecay : 0.00015
  nGPU : 1
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> (42) -> (43) -> (44) -> (45) -> (46) -> (47) -> (48) -> (49) -> (50) -> (51) -> (52) -> (53) -> (54) -> (55) -> (56) -> (57) -> (58) -> (59) -> (60) -> (61) -> (62) -> (63) -> (64) -> (65) -> (66) -> (67) -> (68) -> (69) -> (70) -> (71) -> (72) -> (73) -> (74) -> (75) -> (76) -> (77) -> (78) -> (79) -> (80) -> (81) -> (82) -> (83) -> (84) -> (85) -> (86) -> output]
  (1): cudnn.SpatialConvolution(3 -> 32, 2x2, 1,1, 1,1) without bias
  (2): cudnn.SpatialBatchNormalization
  (3): cudnn.ReLU
  (4): cudnn.SpatialConvolution(32 -> 256, 2x2) without bias
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialConvolution(256 -> 512, 2x2, 1,1, 1,1) without bias
  (8): cudnn.SpatialBatchNormalization
  (9): cudnn.ReLU
  (10): cudnn.SpatialConvolution(512 -> 512, 2x2) without bias
  (11): cudnn.SpatialBatchNormalization
  (12): cudnn.ReLU
  (13): cudnn.SpatialConvolution(512 -> 512, 2x2, 1,1, 1,1) without bias
  (14): cudnn.SpatialBatchNormalization
  (15): cudnn.ReLU
  (16): cudnn.SpatialConvolution(512 -> 512, 2x2) without bias
  (17): cudnn.SpatialBatchNormalization
  (18): cudnn.ReLU
  (19): cudnn.SpatialConvolution(512 -> 512, 2x2, 1,1, 1,1) without bias
  (20): cudnn.SpatialBatchNormalization
  (21): cudnn.ReLU
  (22): cudnn.SpatialConvolution(512 -> 256, 2x2) without bias
  (23): cudnn.SpatialBatchNormalization
  (24): cudnn.ReLU
  (25): cudnn.SpatialConvolution(256 -> 64, 2x2, 1,1, 1,1) without bias
  (26): cudnn.SpatialBatchNormalization
  (27): cudnn.ReLU
  (28): cudnn.SpatialConvolution(64 -> 256, 2x2) without bias
  (29): cudnn.SpatialBatchNormalization
  (30): cudnn.ReLU
  (31): cudnn.SpatialConvolution(256 -> 128, 1x1) without bias
  (32): cudnn.SpatialBatchNormalization
  (33): cudnn.ReLU
  (34): cudnn.SpatialMaxPooling(3x3, 2,2)
  (35): cudnn.SpatialConvolution(128 -> 128, 2x2, 1,1, 1,1) without bias
  (36): cudnn.SpatialBatchNormalization
  (37): cudnn.ReLU
  (38): cudnn.SpatialConvolution(128 -> 2048, 2x2) without bias
  (39): cudnn.SpatialBatchNormalization
  (40): cudnn.ReLU
  (41): cudnn.SpatialConvolution(2048 -> 1024, 2x2, 1,1, 1,1) without bias
  (42): cudnn.SpatialBatchNormalization
  (43): cudnn.ReLU
  (44): cudnn.SpatialConvolution(1024 -> 1024, 2x2, 1,1, 1,1) without bias
  (45): cudnn.SpatialBatchNormalization
  (46): cudnn.ReLU
  (47): cudnn.SpatialConvolution(1024 -> 1024, 2x2) without bias
  (48): cudnn.SpatialBatchNormalization
  (49): cudnn.ReLU
  (50): cudnn.SpatialConvolution(1024 -> 1024, 2x2, 1,1, 1,1) without bias
  (51): cudnn.SpatialBatchNormalization
  (52): cudnn.ReLU
  (53): cudnn.SpatialConvolution(1024 -> 1024, 2x2) without bias
  (54): cudnn.SpatialBatchNormalization
  (55): cudnn.ReLU
  (56): cudnn.SpatialConvolution(1024 -> 1024, 2x2) without bias
  (57): cudnn.SpatialBatchNormalization
  (58): cudnn.ReLU
  (59): cudnn.SpatialConvolution(1024 -> 1024, 1x1) without bias
  (60): cudnn.SpatialBatchNormalization
  (61): cudnn.ReLU
  (62): cudnn.VolumetricAveragePooling
  (63): cudnn.SpatialConvolution(512 -> 1024, 2x2, 1,1, 1,1) without bias
  (64): cudnn.SpatialBatchNormalization
  (65): cudnn.ReLU
  (66): cudnn.SpatialConvolution(1024 -> 2048, 2x2) without bias
  (67): cudnn.SpatialBatchNormalization
  (68): cudnn.ReLU
  (69): cudnn.SpatialConvolution(2048 -> 2048, 2x2, 1,1, 1,1) without bias
  (70): cudnn.SpatialBatchNormalization
  (71): cudnn.ReLU
  (72): cudnn.SpatialConvolution(2048 -> 2048, 2x2) without bias
  (73): cudnn.SpatialBatchNormalization
  (74): cudnn.ReLU
  (75): cudnn.SpatialConvolution(2048 -> 2048, 2x2, 1,1, 1,1) without bias
  (76): cudnn.SpatialBatchNormalization
  (77): cudnn.ReLU
  (78): cudnn.SpatialConvolution(2048 -> 2048, 2x2) without bias
  (79): cudnn.SpatialBatchNormalization
  (80): cudnn.ReLU
  (81): cudnn.SpatialConvolution(2048 -> 1024, 1x1) without bias
  (82): cudnn.SpatialBatchNormalization
  (83): cudnn.ReLU
  (84): cudnn.VolumetricAveragePooling
  (85): nn.View(-1)
  (86): nn.Linear(256 -> 100)
}
Network has	27	convolutions	
Will save at logs/nin-my-grouped-2x2-volumetric-deep-fattop_347319886	
==> online epoch # 1 [batchSize = 32]	
