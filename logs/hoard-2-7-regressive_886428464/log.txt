{
  optnet_optimize : true
  generate_graph : false
  learningRate : 0.1
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-7-regressive"
  save : "logs/hoard-2-7-regressive_886428464"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
==> loading data	
==> configuring model	
{
  1 : 
    {
      1 : 32
      2 : 32
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
  2 : 
    {
      1 : 32
      2 : 32
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
}
{
  1 : 
    {
      1 : 64
      2 : 32
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
}
{
  1 : 
    {
      1 : 64
      2 : 64
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
  2 : 
    {
      1 : 64
      2 : 64
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
}
{
  1 : 
    {
      1 : 128
      2 : 64
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
}
{
  1 : 
    {
      1 : 128
      2 : 128
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
  2 : 
    {
      1 : 128
      2 : 128
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
}
{
  1 : 
    {
      1 : 256
      2 : 128
      3 : 3
      4 : 3
      5 : 1
      6 : 1
      7 : 1
      8 : 1
      9 : 1
    }
}
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]
  (1): cudnn.SpatialConvolution(3 -> 32, 3x3, 1,1, 1,1) without bias
  (2): cudnn.SpatialBatchNormalization
  (3): cudnn.ReLU
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> output]
               (1): cudnn.SpatialConvolution(64 -> 32, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(96 -> 64, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (5): cudnn.SpatialMaxPooling(3x3, 2,2)
  (6): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> output]
               (1): cudnn.SpatialConvolution(128 -> 64, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(192 -> 128, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (7): cudnn.SpatialMaxPooling(3x3, 2,2)
  (8): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
               (4): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): cudnn.ReLU
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> output]
               (1): cudnn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): cudnn.ReLU
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(384 -> 256, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (9): cudnn.VolumetricAveragePooling
  (10): nn.View(-1)
  (11): nn.Linear(256 -> 100)
}
Network has	13	convolutions	
Will save at logs/hoard-2-7-regressive_886428464	
==> online epoch # 1 [batchSize = 64]	
