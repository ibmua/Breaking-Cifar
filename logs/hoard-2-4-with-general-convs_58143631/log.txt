{
  optnet_optimize : true
  generate_graph : false
  learningRate : 0.1
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-4-with-general-convs"
  save : "logs/hoard-2-4-with-general-convs_58143631"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 4
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
==> loading data	
==> configuring model	
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 32
          2 : 128
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 128
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 4
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 64
          2 : 128
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 128
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 4
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 64
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 4
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 128
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 4
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 256
          2 : 1024
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 1024
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 4
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 512
          2 : 1024
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      2 : 
        {
          1 : 1024
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 4
        }
    }
}
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> output]
  (1): cudnn.SpatialConvolution(3 -> 32, 3x3, 1,1, 1,1) without bias
  (2): cudnn.SpatialBatchNormalization
  (3): cudnn.ReLU
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(32 -> 128, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(128 -> 32, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 128, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(128 -> 32, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(96 -> 64, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (5): cudnn.SpatialMaxPooling(3x3, 2,2)
  (6): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(64 -> 256, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(256 -> 64, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(128 -> 256, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(256 -> 64, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(192 -> 128, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (7): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
    (2): cudnn.SpatialBatchNormalization
    (3): nn.ELU (alpha:1.000000)
    (4): cudnn.SpatialConvolution(128 -> 256, 3x3, 1,1, 1,1)
    (5): cudnn.SpatialBatchNormalization
    (6): nn.ELU (alpha:1.000000)
  }
  (8): cudnn.SpatialMaxPooling(3x3, 2,2)
  (9): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(256 -> 1024, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(1024 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
               (1): cudnn.SpatialConvolution(512 -> 1024, 3x3, 1,1, 1,1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(1024 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (3): cudnn.SpatialConvolution(768 -> 256, 1x1)
    (4): cudnn.SpatialBatchNormalization
    (5): cudnn.ReLU
  }
  (10): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
    (2): cudnn.SpatialBatchNormalization
    (3): nn.ELU (alpha:1.000000)
    (4): cudnn.SpatialConvolution(256 -> 512, 3x3, 1,1, 1,1)
    (5): cudnn.SpatialBatchNormalization
    (6): nn.ELU (alpha:1.000000)
  }
  (11): cudnn.VolumetricAveragePooling
  (12): nn.View(-1)
  (13): nn.Linear(256 -> 100)
}
Network has	20	convolutions	
Will save at logs/hoard-2-4-with-general-convs_58143631	
==> online epoch # 1 [batchSize = 64]	
{
  epoch : 1
  test_acc : 19.73
  loss : 3.505049457318
  train_acc : 15.044814340589
  lr : 0.09925
  train_time : 62.434725046158
  test_time : 5.3366460800171
  n_parameters : 9955332
  train_loss : 3.505049457318
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.09925
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-4-with-general-convs"
  save : "logs/hoard-2-4-with-general-convs_58143631"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 4
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":3.505049457318,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-2-4-with-general-convs","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":19.73,"init_value":10,"train_acc":15.044814340589,"sequences":1,"epoch_step":1,"train_time":62.434725046158,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":1,"imageSize":32,"depth":2,"hflip":true,"widen_factor":4,"num_classes":100,"save":"logs\/hoard-2-4-with-general-convs_58143631","lr":0.09925,"generate_graph":false,"learningRate":0.09925,"train_loss":3.505049457318,"randomcrop_type":"reflection","test_time":5.3366460800171,"n_parameters":9955332,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 2 [batchSize = 64]	
{
  epoch : 2
  test_acc : 25.07
  loss : 2.7912647882894
  train_acc : 27.924935979513
  lr : 0.0985045
  train_time : 63.139970064163
  test_time : 4.8290200233459
  n_parameters : 9955332
  train_loss : 2.7912647882894
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.0985045
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-4-with-general-convs"
  save : "logs/hoard-2-4-with-general-convs_58143631"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 4
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":2.7912647882894,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-2-4-with-general-convs","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":25.07,"init_value":10,"train_acc":27.924935979513,"sequences":1,"epoch_step":1,"train_time":63.139970064163,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":2,"imageSize":32,"depth":2,"hflip":true,"widen_factor":4,"num_classes":100,"save":"logs\/hoard-2-4-with-general-convs_58143631","lr":0.0985045,"generate_graph":false,"learningRate":0.0985045,"train_loss":2.7912647882894,"randomcrop_type":"reflection","test_time":4.8290200233459,"n_parameters":9955332,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 3 [batchSize = 64]	
{
  epoch : 3
  test_acc : 31.47
  loss : 2.4595259566924
  train_acc : 34.583066581306
  lr : 0.097763473
  train_time : 63.116682052612
  test_time : 4.7702009677887
  n_parameters : 9955332
  train_loss : 2.4595259566924
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.097763473
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-4-with-general-convs"
  save : "logs/hoard-2-4-with-general-convs_58143631"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 4
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":2.4595259566924,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-2-4-with-general-convs","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":31.47,"init_value":10,"train_acc":34.583066581306,"sequences":1,"epoch_step":1,"train_time":63.116682052612,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":3,"imageSize":32,"depth":2,"hflip":true,"widen_factor":4,"num_classes":100,"save":"logs\/hoard-2-4-with-general-convs_58143631","lr":0.097763473,"generate_graph":false,"learningRate":0.097763473,"train_loss":2.4595259566924,"randomcrop_type":"reflection","test_time":4.7702009677887,"n_parameters":9955332,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 4 [batchSize = 64]	
{
  epoch : 4
  test_acc : 39.08
  loss : 2.3035922255009
  train_acc : 38.064180537772
  lr : 0.097026892162
  train_time : 63.128504991531
  test_time : 4.7307670116425
  n_parameters : 9955332
  train_loss : 2.3035922255009
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.097026892162
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-4-with-general-convs"
  save : "logs/hoard-2-4-with-general-convs_58143631"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 2
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 4
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":2.3035922255009,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-2-4-with-general-convs","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":39.08,"init_value":10,"train_acc":38.064180537772,"sequences":1,"epoch_step":1,"train_time":63.128504991531,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":4,"imageSize":32,"depth":2,"hflip":true,"widen_factor":4,"num_classes":100,"save":"logs\/hoard-2-4-with-general-convs_58143631","lr":0.097026892162,"generate_graph":false,"learningRate":0.097026892162,"train_loss":2.3035922255009,"randomcrop_type":"reflection","test_time":4.7307670116425,"n_parameters":9955332,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 5 [batchSize = 64]	
