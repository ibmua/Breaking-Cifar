{
  optnet_optimize : true
  generate_graph : false
  learningRate : 0.1
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-5-reducing"
  save : "logs/hoard-2-5-reducing_104172915"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 4
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
==> loading data	
==> configuring model	
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 32
          2 : 32
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 64
          2 : 32
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 96
          2 : 32
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 128
          2 : 32
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 32
          2 : 32
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 64
          2 : 64
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 128
          2 : 64
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 192
          2 : 64
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 256
          2 : 64
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 64
          2 : 64
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
}
conv_params	{
  1 : 
    {
      1 : 
        {
          1 : 256
          2 : 256
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  2 : 
    {
      1 : 
        {
          1 : 512
          2 : 256
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  3 : 
    {
      1 : 
        {
          1 : 768
          2 : 256
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
  4 : 
    {
      1 : 
        {
          1 : 1024
          2 : 256
          3 : 1
          4 : 1
          5 : 1
          6 : 1
          7 : 0
          8 : 0
          9 : 1
        }
      2 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
      3 : 
        {
          1 : 256
          2 : 256
          3 : 3
          4 : 3
          5 : 1
          6 : 1
          7 : 1
          8 : 1
          9 : 1
        }
    }
}
forward output	{
  1 : CudaTensor - size: 1x100
}
backward output	{
  1 : CudaTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> output]
  (1): cudnn.SpatialConvolution(3 -> 32, 3x3, 1,1, 1,1) without bias
  (2): cudnn.SpatialBatchNormalization
  (3): cudnn.ReLU
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(32 -> 32, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(64 -> 32, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (3): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(96 -> 32, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (4): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(128 -> 32, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (5): cudnn.SpatialConvolution(160 -> 64, 1x1)
    (6): cudnn.SpatialBatchNormalization
    (7): cudnn.ReLU
  }
  (5): cudnn.SpatialMaxPooling(3x3, 2,2)
  (6): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(64 -> 64, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(128 -> 64, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (3): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(192 -> 64, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (4): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(256 -> 64, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (5): cudnn.SpatialConvolution(320 -> 128, 1x1)
    (6): cudnn.SpatialBatchNormalization
    (7): cudnn.ReLU
  }
  (7): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
    (2): cudnn.SpatialBatchNormalization
    (3): nn.ELU (alpha:1.000000)
    (4): cudnn.SpatialConvolution(128 -> 256, 1x1)
    (5): cudnn.SpatialBatchNormalization
    (6): nn.ELU (alpha:1.000000)
  }
  (8): cudnn.SpatialMaxPooling(3x3, 2,2)
  (9): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
    (1): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(256 -> 256, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (2): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(512 -> 256, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (3): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(768 -> 256, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (4): nn.Concat {
      input
        |`-> (1): nn.Identity
        |`-> (2): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
               (1): cudnn.SpatialConvolution(1024 -> 256, 1x1)
               (2): cudnn.SpatialBatchNormalization
               (3): nn.ELU (alpha:1.000000)
               (4): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (5): cudnn.SpatialBatchNormalization
               (6): nn.ELU (alpha:1.000000)
               (7): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
               (8): cudnn.SpatialBatchNormalization
               (9): nn.ELU (alpha:1.000000)
             }
         ... -> output
    }
    (5): cudnn.SpatialConvolution(1280 -> 256, 1x1)
    (6): cudnn.SpatialBatchNormalization
    (7): cudnn.ReLU
  }
  (10): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
    (2): cudnn.SpatialBatchNormalization
    (3): nn.ELU (alpha:1.000000)
    (4): cudnn.SpatialConvolution(256 -> 512, 1x1)
    (5): cudnn.SpatialBatchNormalization
    (6): nn.ELU (alpha:1.000000)
  }
  (11): cudnn.VolumetricAveragePooling
  (12): nn.View(-1)
  (13): nn.Linear(256 -> 100)
}
Network has	44	convolutions	
Will save at logs/hoard-2-5-reducing_104172915	
==> online epoch # 1 [batchSize = 64]	
{
  epoch : 1
  test_acc : 20.22
  loss : 3.5671622044909
  train_acc : 13.464308578745
  lr : 0.09925
  train_time : 69.633927106857
  test_time : 6.0348651409149
  n_parameters : 6546500
  train_loss : 3.5671622044909
}
{
  optnet_optimize : true
  num_classes : 100
  generate_graph : false
  learningRate : 0.09925
  init_value : 10
  randomcrop : 4
  sequences : 1
  epoch_step : 1
  randomcrop_type : "reflection"
  learningRateDecayRatio : 0.994
  model : "hoard-2-5-reducing"
  save : "logs/hoard-2-5-reducing_104172915"
  dampening : 0
  weightDecay : 0.0005
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 4
  nGPU : 1
  multiply_input_factor : 1
  dataset : "./datasets/cifar100_combined.t7"
  max_epoch : 1500
  momentum : 0.9
  optimMethod : "sgd"
  widen_factor : 1
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0.00015
  data_type : "torch.CudaTensor"
  batchSize : 64
}
json_stats: {"optnet_optimize":true,"loss":3.5671622044909,"randomcrop":4,"batchSize":64,"data_type":"torch.CudaTensor","model":"hoard-2-5-reducing","nesterov":true,"nGPU":1,"multiply_input_factor":1,"dataset":".\/datasets\/cifar100_combined.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":20.22,"init_value":10,"train_acc":13.464308578745,"sequences":1,"epoch_step":1,"train_time":69.633927106857,"learningRateDecayRatio":0.994,"dampening":0,"learningRateDecay":0.00015,"max_epoch":1500,"epoch":1,"imageSize":32,"depth":4,"hflip":true,"widen_factor":1,"num_classes":100,"save":"logs\/hoard-2-5-reducing_104172915","lr":0.09925,"generate_graph":false,"learningRate":0.09925,"train_loss":3.5671622044909,"randomcrop_type":"reflection","test_time":6.0348651409149,"n_parameters":6546500,"cudnn_deterministic":false,"shortcutType":"A"}	
==> online epoch # 2 [batchSize = 64]	
